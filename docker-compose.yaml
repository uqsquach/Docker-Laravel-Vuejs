version: '3.7'
services:
  www:
    image: nginx:alpine
    build:
      context: ./dockerfile
      docker: nginx.dockerfile
    container_name: nginx
    volumes:
      - .
    ports:
      - 80:80
    depends_on:
      - backend
      - frontend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # keep connection until frontend running
    tty: true
    container_name: backend
    ports:
      - '8000:8000'
    volumes:
      - ./backend:/
    networks:
      - web

  frontend:    
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - '3000:3000'
    volumes:
      - ./frontend:/
    # Connect backend API
    depends_on:
      - backend
    networks:
      - web

  db:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    ports:
      - "4306:3306"
    environment:
      - MYSQL_DATABASE: ${DB_DATABASE}
      - MYSQL_USER: ${DB_USERNAME}
      #- MYSQL_PASSWORD: 'root'
      - MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      -
    networks:
      - web 

  # composer:
  npm:
    image: node:13.7
    container_name: npm
    volumes:
      - ./src:/var/www/html
    ports:
      - 3000:3000
      - 3001:3001
    working_dir: /var/www/html
    entrypoint: ['npm']
    networks:
      - laravel

  artisan:
    build:
      context: ./dockerfiles
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    container_name: artisan
    volumes:
      - ./src:/var/www/html:delegated
    depends_on:
      - mysql
    working_dir: /var/www/html
    entrypoint: ['php', '/var/www/html/artisan']
    networks:
      - laravel


networks:
  web:
    driver: bridge
